# ============================================================================ #
#                D o c k e r   B u i l d   ->   D o c k e r H u b
# ============================================================================ #

# Docker Build, Tag & Push to DockerHub

---
name: Docker Build -> DockerHub

on:
  workflow_call:
    inputs:
      repo:
        description: The DockerHub repository in <user>/<repo> format
        type: string
        required: true
      tags:
        description: Tags to assign, space or line separated
        type: string
        default: latest
      context:
        type: string
        #default: .
      file:
        type: string
        #default: Dockerfile  # breaks auto-pathing when specifying context, you'd have to remember to set file to $context/Dockerfile yourself, better to omit this
      max-cache:
        type: boolean
        default: false
      build-cache:
        description: The build cache tag to use
        type: string
        default: buildcache
      dockerfile-repo:
        description: A separate repo where the Dockerfile for the build can be found. Will be checked out first to a directory of the same name
        type: string
        required: false
      dockerfile-ref:
        description: The branch from dockerfile-repo to checkout (defaults to the default branch if not specified)
        type: string
        required: false
      debug:
        type: boolean
        required: false
        default: false
    secrets:
      DOCKERHUB_USER:
        required: true
      DOCKERHUB_TOKEN:
        required: true

permissions:
  contents: read
  packages: write

defaults:
  run:
    shell: bash -euxo pipefail {0}

env:
  REPO: ${{ inputs.repo }}
  TAGS: ${{ inputs.tags }}
  BUILDCACHE: ${{ inputs.build-cache }}
  DEBUG: ${{ inputs.debug || github.event.inputs.debug || '' }}

jobs:
  docker_build:
    name: Docker Build -> DockerHub
    runs-on: ubuntu-latest
    # better done in the calling workflow to prevent manual docker builds on the wrong branches
    #if: github.ref_name == 'master' || github.ref_name == 'main' || contains(github.ref_name, 'docker')
    steps:
      - name: Environment
        run: env | sort

      - uses: actions/checkout@v2
        with:
          submodules: 'true'  # requires Git 2.18+ to be installed first

      - name: Generate environment variable DOCKERFILE_CHECKOUT_PATH
        if: ${{ inputs.dockerfile-repo }}
        run: |
          DOCKERFILE_CHECKOUT_PATH="${{ env.DOCKERFILE_REPO }}"
          DOCKERFILE_CHECKOUT_PATH="${DOCKERFILE_CHECKOUT_PATH##*/}"
          echo "DOCKERFILE_CHECKOUT_PATH=$DOCKERFILE_CHECKOUT_PATH" >> "$GITHUB_ENV"
        env:
          DOCKERFILE_REPO: ${{ inputs.dockerfile-repo }}

      - name: Git Checkout Dockerfile repo
        if: ${{ inputs.dockerfile-repo }}
        uses: actions/checkout@v2
        with:
          repository: ${{ inputs.dockerfile-repo }}
          ref: ${{ inputs.dockerfile-ref }}
          submodules: 'true'  # requires Git 2.18+ to be installed first
          path: ${{ env.DOCKERFILE_CHECKOUT_PATH }}

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Generate REPO_TAGS environment variable
        run: |
          echo "REPO_TAGS<<EOF" >> "$GITHUB_ENV"
            for tag in ${{ env.TAGS }}; do
              if ! [[ "$tag" =~ : ]]; then
                echo "${{env.REPO}}:$tag" >> "$GITHUB_ENV"
              else
                echo "$tag" >> "$GITHUB_ENV"
              fi
            done
          echo EOF >> "$GITHUB_ENV"

      - name: Generate CACHE_FROM environment variable
        run: |
          echo "CACHE_FROM<<EOF" >> "$GITHUB_ENV"
            for repo_tag in $(tr '\n' ' ' <<< "${{ env.REPO_TAGS }}"); do
              echo "type=registry,ref=$repo_tag" >> "$GITHUB_ENV"
            done
          echo "EOF" >> "$GITHUB_ENV"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # XXX: Normal build, use inline cache when max-cache input is not set to 'true' - fine for most purposes except for multi-stage builds
      - name: Docker Build & Push
        if: ${{ ! inputs.max-cache }}
        uses: docker/build-push-action@v2
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.file }}
          tags: ${{ env.REPO_TAGS }}
          push: true
          cache-from: ${{ env.CACHE_FROM }}
          cache-to: type=inline

      # call like so:
      #
      #   jobs:
      #     docker_build:
      #       uses: buluma/GitHub-Actions/.github/workflows/docker_build.yaml@master
      #       with:
      #         max-cache: true
      #         ...
      #
      - name: Docker Build & Push with external build cache
        if: ${{ inputs.max-cache }}
        uses: docker/build-push-action@v2
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.file }}
          tags: ${{ env.REPO_TAGS }}
          push: true
          cache-from: |
            type=registry,ref=${{env.REPO}}:${{env.BUILDCACHE}}
            ${{ env.CACHE_FROM }}
          cache-to: type=registry,ref=${{env.REPO}}:${{env.BUILDCACHE}},mode=max
