# ============================================================================ #
#                 D o c k e r   B u i l d   ->   A W S   E C R
# ============================================================================ #

# Docker Build, Tag & Push to AWS ECR

---
name: Docker Build -> AWS ECR

on:
  workflow_call:
    inputs:
      repo:
        description: The ECR repository, without the 'xxx.dkr.ecr.<region>.amazonaws.com' prefix
        type: string
        required: true
      max-cache:
        description: use GHCR as a max cache external registry (ECR doesn't support this at time of writing)
        type: boolean
        default: false
        required: false
      dockerfile-repo:
        description: A separate repo where the Dockerfile for the build can be found. Will be checked out first to a directory of the same name
        type: string
        required: false
      dockerfile-ref:
        description: The branch from dockerfile-repo to checkout (defaults to the default branch if not specified)
        type: string
        required: false
      debug:
        type: boolean
        required: false
        default: false
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_DEFAULT_REGION:
        required: true

permissions:
  contents: read
  packages: write

defaults:
  run:
    shell: bash -euxo pipefail {0}

env:
  REPO: ${{ inputs.repo }}
  DEBUG: ${{ inputs.debug || github.event.inputs.debug || '' }}

jobs:
  docker_build:
    name: Docker Build -> AWS ECR
    runs-on: ubuntu-latest
    # better done in the calling workflow to prevent manual docker builds on the wrong branches
    #if: github.ref_name == 'master' || github.ref_name == 'main' || contains(github.ref_name, 'docker')
    steps:
      - name: Environment
        run: env | sort

      - uses: actions/checkout@v4
        with:
          submodules: 'true'  # requires Git 2.18+ to be installed first

      - name: Git Checkout Dockerfile repo
        if: ${{ inputs.dockerfile-repo }}
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.dockerfile-repo }}
          ref: ${{ inputs.dockerfile-ref }}
          submodules: 'true'  # requires Git 2.18+ to be installed first

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Generate environment variable AWS_ACCOUNT_ID
        run: echo "AWS_ACCOUNT_ID=$(aws sts get-caller-identity | jq -r .Account)" >> "$GITHUB_ENV"
      - name: Generate environment variable AWS_ECR_REGISTRY
        run: echo "AWS_ECR_REGISTRY=${{env.AWS_ACCOUNT_ID}}.dkr.ecr.${{env.AWS_DEFAULT_REGION}}.amazonaws.com" >> "$GITHUB_ENV"
      - name: Generate environment variable DOCKER_IMAGE
        run: echo "DOCKER_IMAGE=${{ env.AWS_ECR_REGISTRY }}/${{ env.REPO }}" >> "$GITHUB_ENV"
      - name: Generate environment variable EPOCH
        run: echo "EPOCH=$(date --utc '+%s')" >> "$GITHUB_ENV"
      - name: Generate environment variable DATESTAMP
        run: echo "DATESTAMP=$(date --utc --date="@${{env.EPOCH}}" '+%FT%H%M%SZ')" >> "$GITHUB_ENV"
      - name: Generate environment variable TIMESTAMP
        run: echo "TIMESTAMP=$(date --utc --date="@${{env.EPOCH}}" '+%F')" >> "$GITHUB_ENV"

      - name: Generate environment variable DOCKER_IMAGE_CACHE
        if: ${{ inputs.max-cache }}
        run: echo "DOCKER_IMAGE_CACHE=ghcr.io/${{ github.repository }}" >> "$GITHUB_ENV"
        #run: echo "DOCKER_IMAGE_CACHE=${{ env.AWS_ECR_REGISTRY }}/${{ env.APP }}-cache" >> $GITHUB_ENV  # doesn't work, ECR simply doesn't support it

      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ env.AWS_ECR_REGISTRY }}
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to GHCR
        if: ${{ inputs.max-cache }}
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # XXX: Normal build, use inline cache when max-cache input is not set to 'true' - fine for most purposes except for multi-stage builds
      - name: Docker Build & Push
        if: ${{ ! inputs.max-cache }}
        uses: docker/build-push-action@v2
        with:
          push: true
          cache-from: |
            type=registry,ref=${{env.DOCKER_IMAGE}}:latest
            type=registry,ref=${{env.DOCKER_IMAGE}}:${{github.ref_name}}
            type=registry,ref=${{env.DOCKER_IMAGE}}:${{github.sha}}
          cache-to: type=inline
          tags: |
            ${{env.DOCKER_IMAGE}}:latest
            ${{env.DOCKER_IMAGE}}:${{github.ref_name}}
            ${{env.DOCKER_IMAGE}}:${{github.sha}}
            ${{env.DOCKER_IMAGE}}:${{env.EPOCH}}
            ${{env.DOCKER_IMAGE}}:${{env.DATESTAMP}}
            ${{env.DOCKER_IMAGE}}:${{env.TIMESTAMP}}

      # XXX: Max Cache build with separate GHCR buildcache since ECR doesn't support it - for multi-stage builds
      #
      # call like so:
      #
      #   jobs:
      #     docker_build:
      #       uses: buluma/GitHub-Actions/.github/workflows/docker_build_aws_ecr.yaml@master
      #       with:
      #         max-cache: true
      #         ...
      #
      - name: Docker Build & Push with external GHCR registry max cache
        if: ${{ inputs.max-cache }}
        uses: docker/build-push-action@v2
        with:
          push: true
          cache-from: |
            type=registry,ref=${{env.DOCKER_IMAGE_CACHE}}:buildcache
            type=registry,ref=${{env.DOCKER_IMAGE}}:latest
            type=registry,ref=${{env.DOCKER_IMAGE}}:${{github.ref_name}}
            type=registry,ref=${{env.DOCKER_IMAGE}}:${{github.sha}}
          cache-to: type=registry,ref=${{env.DOCKER_IMAGE_CACHE}}:buildcache,mode=max  # XXX: fails to push to ECR which doesn't support external registry cache export, so set to GHCR for cache instead
          tags: |
            ${{env.DOCKER_IMAGE}}:latest
            ${{env.DOCKER_IMAGE}}:${{github.ref_name}}
            ${{env.DOCKER_IMAGE}}:${{github.sha}}
            ${{env.DOCKER_IMAGE}}:${{env.EPOCH}}
            ${{env.DOCKER_IMAGE}}:${{env.DATESTAMP}}
            ${{env.DOCKER_IMAGE}}:${{env.TIMESTAMP}}
